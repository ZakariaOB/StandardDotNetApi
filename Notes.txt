Session 1 : Swagger

- Standard Api is a Web app MVC because we need to have the user accounts 
  (We will come back to this later)
  => Individual user accounts in app .

- Delete : Http roots / Area / Data / Models / HomeController

- Rename ApplicationDataContext to DbContext

- Change the Debug profile to 'Projet(StandarApi)' in our case

- For swagger we need Swashbuckle.AspNetCore

- Swagger is just another middleware =>> Check .

- Swagger vs Postman : https://www.quora.com/What-is-the-difference-between-postman-and-swagger-tool

- git init
  git commit -m "Intial commit : Project creation + swagger capabilities"
  git remote add orgin https://github.com/ZakariaOB/StandardDotNetApi.git
  git push -u origin master

Session 2 : Versioning

- Not that clear : Check the other video

Session 3 : Dependeny injection

- object v = new HeDo(); IDo f = v as IDo; f.doSome();
  => we can extract from the object another object that is implementing certain interface .
  => Used in the StartUp class
- FromBody => Will help to Map the object coming from the Body
- CreatedAt method usages / Kestrel server

Session 4 : Post method

Session 5 : Get method

Session 6 : Put method

- Put => Update the result
- Patch => Update some values
- Great explantion of the differences between http verbs : 
   https://stackoverflow.com/questions/31089221/what-is-the-difference-between-put-post-and-patch
- Always create request for update , create (UpdateMessageRequest, CreateMessageRequest)

Session 7 : Delete method

- Remove method : How does it work
- Return in case of Deleted => NoContent() Or NoFound()
- Recheck Http return codes

Session 8 :EF 
- Creating an identity project to have the data context and first migration create
      - This will also add by default the right entity framework dependencies needed .

- Check async programming in .NET
- The default DbContext is scoped => Change messageService to scoped
- Going from singletion PostService to scoped is interesting . Lifetime is the same through request => Needs to check
- Generate a migration and update database
- Add-Migration AddedMessages
- Update-Database 

Session 9 : Azure cosmos Db

- Install cosmonaut : A nuget package to work with cosmos Db
    - Compatibilty issues : Install first Humamizer.Core 2.8.16
- To do later : Run azure comos db emulator on Docker (Docker compose) 
- Add comosservice as a singletion => Recommeneded

Session 10 : User Autentication with Jwt

- To register a class as a singletion : 
    var jwtSettings = new JwtSettings();
    configuration.GetSection(nameof(JwtSettings)).Bind(jwtSettings);
    services.AddSingleton(jwtSettings);
- Need also to configure Swagger to accept Jwt authentication
- Authentication / Authorization

Session 11 : User registration and controller auth

- Identity endpoint does not respect restful naming conventions because it's for demo purposes
- Normallly this should be on another separate server
- UserManager<IdentityUser> : Provide APIs for managing users in a persistence store
- Existing methods : FindByEmailAsync 
- What are domain objects ?
- _userManager.CreateAsync(newUser, password) => Will pass by the microsoft password hasher
- Claims : Some info about the user
- Check JwtRegisteredClaimNames : Jti
- Always try as mush as possible to respect rest api codes responses
- https://jwt.ms/ : To check the tokens generated 
- After generating the for the user you can add [Authorize] attribute to then add resrictions of access based o 
  that token .
- Update for .NET 5 : options.AddSecurityRequirement(new OpenApiSecurityRequirement()

Session 12 : Login using Jwt

- For the password validation : Identity is  basically responsbile of validating the password (Length and format)
- This not done for the email by default and should added using an attribute on UserRegisterRequest([EmailAddress])
